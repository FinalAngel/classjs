**********
Guidelines
**********

If you want to write your own plugins using class.js please follow those guidelines to create a common
ground for development.

Creating your plugin
====================

First, create a JavaScript file and include the following information within your header:

* the authors name
* the plugins version
* the plugins licence
* the plugins dependencies

For example::

	/**
	 * @author      Angelo Dini
	 * @version     1.0
	 * @copyright	Distributed under the BSD Licence.
	 * @requires	class.js, jquery
	 */

Define a namespace for your plugin, there is no need to increase the amount of global variables.

I prefere to use Cl as the shorthand for **Cl** ass::

	var Cl = window.Cl || {};

Than create a closure so all your variables stay private, as class.js uses by itself::

	(function(){
		// your code here
	})();

	// you might want to pass some custom variables
	(function($){
		// your code here
	})(jQuery);

Than create your plugin within the closure using your namespace::

	Cl.MyPlugin = new Class({
		initialize: function () {
			return 'My first plugin';
		}
	});

You should always use camel case for a class name.


Submitting your plugin
======================

If you successfully created a plugin worth spreading, send me the link via twitter http://twitter.com/finalangel
and I will include it on the plugins list.


Submitting core plugins
=======================

There will be a special list for core plugins. Rather than writing multiple plugins for the sam usage,
we should approach a method by combining base features for a core plugin and extend its functionality
through class.js. This is, in the end, the whole meaning of this library.